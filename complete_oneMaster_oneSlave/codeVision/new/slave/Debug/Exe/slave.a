;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 1/23/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;////////////////
;
;
;unsigned int read_adc(unsigned char adc_input);
;int temp1=0;
;int temp2=0;
;int flag=0;
;//////////////////
;int tem=1;
;int speed=0;
;int thous1=0;
;unsigned char ACKSlave=22;

	.DSEG
;unsigned char ACKMaster=44;
;///////////////////
;void read_two_temperature(){
; 0000 002A void read_two_temperature(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B 
; 0000 002C          temp1=read_adc(0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002D          temp1=(((temp1*1.5)/1023.0)*150)/1.5;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002E          delay_ms(200);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002F          temp2=read_adc(3);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0030          temp2=(((temp2*1.5)/1023.0)*150)/1.5;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0031 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;
;/////////
;char lcd_show[32];
;void send_spi(){
; 0000 0036 void send_spi(){
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0037         tem= temp1-temp2;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0038         SPDR=tem;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0039 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;int thous,second;
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 003D {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003E               thous++;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003F           if(thous==1000){
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0040                 thous=0;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0041                 second++;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0042                 if(second==5){
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0043                    read_two_temperature();
;PCODE: $00000051 VOL: 0
; 0000 0044                    second=0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0045                 }
; 0000 0046           }
;PCODE: $00000054 VOL: 0
; 0000 0047 
; 0000 0048 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 004C {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 004D     thous1++;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 004E     if(thous1==995){
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 004F         thous1=0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0050         send_spi();
;PCODE: $00000064 VOL: 0
; 0000 0051     }
; 0000 0052 
; 0000 0053 }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;
;int flag1=0;
;unsigned char data;
;interrupt [SPI_STC] void spi_isr(void)
; 0000 0058 {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0059 data=SPDR;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 005A if(flag1==0){
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 005B     if(data==ACKMaster){
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 005C         if(tem!=0){
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 005D             flag1=1;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 005E             delay_ms(10);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 005F             SPDR=ACKSlave;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0060         }
; 0000 0061 
; 0000 0062     }
;PCODE: $0000007D VOL: 0
; 0000 0063 }else{
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0064     flag1=0;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0065     speed=data;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0066     OCR2=speed*(42.5);//255/6=42.5
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0067 }
;PCODE: $0000008C VOL: 0
; 0000 0068 }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;
;interrupt [ANA_COMP] void ana_comp_isr(void)
; 0000 006B {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 006C // Place your code here
; 0000 006D PORTD.7=1;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 006E    if(flag==0){
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 006F     flag=1;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0070     thous=0;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0071     second=0;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0072     read_two_temperature();
;PCODE: $0000009C VOL: 0
; 0000 0073     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0074 
; 0000 0075    }else{
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0076    TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0077     flag=0;
;PCODE: $000000A3 VOL: 0
; 0000 0078     thous=0;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0079     second=0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 007A     read_two_temperature();
;PCODE: $000000A8 VOL: 0
; 0000 007B    }
;PCODE: $000000A9 VOL: 0
; 0000 007C }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0083 {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0084 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $000000AF VOL: 0
;	adc_input -> Y+0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0085 // Delay needed for the stabilization of the ADC input voltage
; 0000 0086 delay_us(10);
;PCODE: $000000B3 VOL: 0
; 0000 0087 // Start the AD conversion
; 0000 0088 ADCSRA|=(1<<ADSC);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0089 // Wait for the AD conversion to complete
; 0000 008A while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 008B ADCSRA|=(1<<ADIF);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 008C return ADCW;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 008D }
;PCODE: $000000C1 VOL: 0
;
;void main(void)
; 0000 0090 {
;PCODE: $000000C2 VOL: 0
; 0000 0091 // Declare your local variables here
; 0000 0092 
; 0000 0093 // Input/Output Ports initialization
; 0000 0094 // Port A initialization
; 0000 0095 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0096 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0097 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0098 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0099 
; 0000 009A // Port B initialization
; 0000 009B // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 009C DDRB=(0<<DDB7) | (1<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 009D // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 009E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 009F 
; 0000 00A0 // Port C initialization
; 0000 00A1 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00A2 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00A3 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00A4 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00A5 
; 0000 00A6 // Port D initialization
; 0000 00A7 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00A8 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00A9 // State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00AA PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00AB 
; 0000 00AC // Timer/Counter 0 initialization
; 0000 00AD // Clock source: System Clock
; 0000 00AE // Clock value: 125.000 kHz
; 0000 00AF // Mode: CTC top=OCR0
; 0000 00B0 // OC0 output: Disconnected
; 0000 00B1 // Timer Period: 1 ms
; 0000 00B2 //TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
; 0000 00B3 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00B4 TCNT0=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00B5 OCR0=0x7C;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00B6 
; 0000 00B7 // Timer/Counter 1 initialization
; 0000 00B8 // Clock source: System Clock
; 0000 00B9 // Clock value: 8000.000 kHz
; 0000 00BA // Mode: CTC top=OCR1A
; 0000 00BB // OC1A output: Disconnected
; 0000 00BC // OC1B output: Disconnected
; 0000 00BD // Noise Canceler: Off
; 0000 00BE // Input Capture on Falling Edge
; 0000 00BF // Timer Period: 1 ms
; 0000 00C0 // Timer1 Overflow Interrupt: Off
; 0000 00C1 // Input Capture Interrupt: Off
; 0000 00C2 // Compare A Match Interrupt: On
; 0000 00C3 // Compare B Match Interrupt: Off
; 0000 00C4 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00C5 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00C6 TCNT1H=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00C7 TCNT1L=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00C8 ICR1H=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00C9 ICR1L=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00CA OCR1AH=0x1F;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00CB OCR1AL=0x3F;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00CC OCR1BH=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00CD OCR1BL=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00CE 
; 0000 00CF // Timer/Counter 2 initialization
; 0000 00D0 // Clock source: System Clock
; 0000 00D1 // Clock value: 125.000 kHz
; 0000 00D2 // Mode: Fast PWM top=0xFF
; 0000 00D3 // OC2 output: Non-Inverted PWM
; 0000 00D4 // Timer Period: 2.048 ms
; 0000 00D5 // Output Pulse(s):
; 0000 00D6 // OC2 Period: 2.048 ms Width: 0 us
; 0000 00D7 ASSR=0<<AS2;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00D8 TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00D9 //TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
; 0000 00DA TCNT2=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00DB OCR2=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00DC 
; 0000 00DD // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00DE TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00DF 
; 0000 00E0 // External Interrupt(s) initialization
; 0000 00E1 // INT0: Off
; 0000 00E2 // INT1: Off
; 0000 00E3 // INT2: Off
; 0000 00E4 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00E5 MCUCSR=(0<<ISC2);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00E6 
; 0000 00E7 // USART initialization
; 0000 00E8 // USART disabled
; 0000 00E9 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00EA 
; 0000 00EB // Analog Comparator initialization
; 0000 00EC // Analog Comparator: On
; 0000 00ED // The Analog Comparator's positive input is
; 0000 00EE // connected to the AIN0 pin
; 0000 00EF // The Analog Comparator's negative input is
; 0000 00F0 // connected to the AIN1 pin
; 0000 00F1 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00F2 ACSR=(0<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (1<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00F3 
; 0000 00F4 ADMUX=ADC_VREF_TYPE;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00F5 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00F6 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00F7 // SPI initialization
; 0000 00F8 // SPI Type: Slave
; 0000 00F9 // SPI Clock Rate: 2000.000 kHz
; 0000 00FA // SPI Clock Phase: Cycle Start
; 0000 00FB // SPI Clock Polarity: Low
; 0000 00FC // SPI Data Order: MSB First
; 0000 00FD SPCR=(1<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00FE SPSR=(0<<SPI2X);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00FF 
; 0000 0100 // Clear the SPI interrupt flag
; 0000 0101 #asm
;PCODE: $00000109 VOL: 0
; 0000 0102     in   r30,spsr
    in   r30,spsr
;PCODE: $0000010A VOL: 0
; 0000 0103     in   r30,spdr
    in   r30,spdr
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0104 #endasm
; 0000 0105 
; 0000 0106 // TWI initialization
; 0000 0107 // TWI disabled
; 0000 0108 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0109 
; 0000 010A // Alphanumeric LCD initialization
; 0000 010B // Connections are specified in the
; 0000 010C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 010D // RS - PORTC Bit 0
; 0000 010E // RD - PORTC Bit 1
; 0000 010F // EN - PORTC Bit 2
; 0000 0110 // D4 - PORTC Bit 4
; 0000 0111 // D5 - PORTC Bit 5
; 0000 0112 // D6 - PORTC Bit 6
; 0000 0113 // D7 - PORTC Bit 7
; 0000 0114 // Characters/line: 16
; 0000 0115 lcd_init(16);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0116 
; 0000 0117 // Global enable interrupts
; 0000 0118 #asm("sei")
;PCODE: $00000111 VOL: 0
	sei
;PCODE: $00000112 VOL: 0
; 0000 0119 
; 0000 011A while (1)
;PCODE: $00000113 VOL: 0
; 0000 011B       {
; 0000 011C       // Place your code here
; 0000 011D        lcd_gotoxy(0,0);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 011E        sprintf(lcd_show,"s=%dt=%d d=%d tem1=%dtem2=%d",speed,tem,data,temp1,temp2);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 011F        lcd_puts(lcd_show);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0120       }
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0121 }
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
